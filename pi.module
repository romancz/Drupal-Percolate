<?php

/**
 * @file pi.module
 * This file contains all of the hook implementations for Percolate Integration.
 */

include_once('phpercolate/Api.php');
include_once('pi.admin.inc');

/**
 * Implements hook_menu().
 */
function pi_menu() {
  $items['admin/config/content/percolate'] = array(
    'title' => t('Percolate integration'),
    'description' => t('Configure Percolate Integration settings and user mappings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pi_settings_form'),
    'access arguments' => array('configure pi'),
  );
  $items['admin/config/content/percolate/settings'] = array(
    'title' => t('Settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items['admin/config/content/percolate/users'] = array(
    'title' => t('User mapping'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pi_user_mapping_form'),
    'access arguments' => array('configure pi'),
    'weight' => 5,
  );
  
  return $items;
}


/**
 * Implements hook_permission().
 */
function pi_permission() {
  return array(
    'configure pi' => array(
      'title' => t('Configure Percolate integration'),
    ),
  );
}

/**
 * Builds and returns a PercolateApi object, if available.
 *
 * @param boolean $key - API key, optional
 */
function pi_build_api($key = FALSE) {
  // Ensure cURL is available.
  if (!function_exists('curl_version')) {
    $message = t('cURL must be installed in order to connect with the Percolate API.');
    pi_error($message, 'error');
    return FALSE;
  }
  
  $key = $key ? $key : variable_get('pi_api_key', FALSE);
  if ($key) {
    try {
      $api = new PercolateApi($key);
      return $api;
    }
    catch (PercolateException $e) {
      $message = t('Percolate API could not be built. Error: !e', array(
        '!e' => (string)$e,
      ));
      pi_error($message, 'error');
    }
  }
  else {
    $message = t('Percolate Integration requires an API key to be set before being used. You can do so !here.', array(
      '!here' => l('admin/config/content/percolate'),
    ));
    pi_error($message, 'warning');
  }
  
  return FALSE;
}


/****************/
/* Mapping CRUD */
/****************/

/**
 * Maps an entity to a percolate post in the percolate_post_mapping table.
 *
 * @param $entity_type - Entity type of the linked entity.
 * @param $bundle - Bundle of the linked entity.
 * @param $entity_id - ID of the linked entity.
 * @param $p_id - Percolate post ID.
 * @param $p_uid - User ID of the Percolate post author.
 */
function pi_map_entity_to_post($entity_type, $bundle, $entity_id, $p_id, $p_uid) {
  db_merge('percolate_post_mapping')
    ->key(array(
      'entity_type' => $entity_type,
      'entity_id' => $entity_id,
      'percolate_id' => $p_id,
    ))
    ->fields(array(
      'bundle' => $bundle,
      'percolate_uid' => $p_uid,
    ))
    ->execute();
}


/**
 * Retrieves a mapping by entity.
 *
 * @param $entity_type - Entity type of the linked entity.
 * @param $entity_id - ID of the linked entity.
 *
 * @return stdClass
 */
function pi_get_mappings_by_entity($entity_type, $entity_id) {
  return db_select('percolate_post_mapping', 'ppm')
    ->fields('ppm')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entitiy_id)
    ->execute()
    ->fetch();
}


/**
 * Retrieves mappings to a post ID. Can be multiple.
 *
 * @param $p_id - Percolate post ID.
 * @param $entity_type - Entity type to filter by. OPTIONAL.
 * @param $bundle - Bundle to filter by. OPTIONAL.
 *
 * @return array
 */
function pi_get_mappings_by_post($p_id, $entity_type = FALSE, $bundle = FALSE) {
  $query = db_select('percolate_post_mapping', 'ppm')
    ->fields('ppm')
    ->condition('percolate_id', $p_id);
  
  if ($entity_type) {
    $query->condition('entity_type', $entity_type);
  }
  if ($bundle) {
    $query->condition('bundle', $bundle);
  }
  
  return $query->execute()->fetchAll();
}


/**
 * Marks mapping as deleted.
 * 
 * @param $entity_type
 * @param $entity_id
 */
function pi_mark_mapping_deleted($entity_type, $entity_id) {
  $query = db_update('percolate_post_mapping')
    ->fields(array(
      'deleted' => 1,
    ))
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute();
}

/**
 * Implements hook_entity_delete().
 */
function pi_entity_delete($entity, $type) {
  list($id) = entity_extract_ids($type, $entity);
  pi_mark_mapping_deleted($type, $id);
}


/***********/
/* Utility */
/***********/


/**
 * Set message and watchdog the same message.
 */
function pi_error($message, $severity = 'message') {
  drupal_set_message($message, $severity);
  watchdog('Percolate Integration', $message);
}
