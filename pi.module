<?php

/**
 * @file pi.module
 * This file contains all of the hook implementations for Percolate Integration.
 */

include_once('phpercolate/Api.php');

/**
 * Implements hook_menu().
 */
function pi_menu() {
  $items['admin/config/content/percolate'] = array(
    'title' => t('Percolate Integration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pi_settings_form'),
    'access arguments' => array('configure pi'),
  );
  $items['admin/config/content/percolate/settings'] = array(
    'title' => t('Settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/config/content/percolate/users'] = array(
    'title' => t('User mapping'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pi_user_mapping_form'),
    'access arguments' => array('configure pi'),
  );
  
  return $items;
}


/**
 * Implements hook_permission().
 */
function pi_permission() {
  return array(
    'configure pi' => array(
      'title' => t('Configure Percolate integration'),
    ),
  );
}

/**
 * Builds and returns a Percolate_Api object, if available.
 *
 * @param boolean $key - API key, optional
 */
function pi_build_api($key = FALSE) {
  $key = $key ? $key : variable_get('pi_api_key', FALSE);
  if ($key) {
    try {
      $api = new Percolate_Api($key);
      return $api;
    }
    catch (Percolate_Exception $e) {
      $message = t('Percolate API could not be built. Error: !e', array(
        '!e' => (string)$e,
      ));
      $severity = 'error';
    }
  }
  else {
    $message = t('Percolate Integration requires an API key to be set before being used. You can do so !here.', array(
      '!here' => l('admin/config/content/percolate'),
    ));
    $severity = 'warning';
  }
  
  if ($error_message) {
    drupal_set_message($message, $severity);
    watchdog('Percolate Integration', $message);
  }
  return FALSE;
}

/*****************/
/* Forms / Menus */
/*****************/

/**
 * Page callback for admin/config/content/percolate. Provides a settings form.
 */
function pi_settings_form($form, &$form_state) {
  $form = array();
  $key = variable_get('pi_api_key', '');

  $form['pi_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#default_value' => variable_get('pi_api_key', ''),
  );

  return system_settings_form($form);
}


/**
 * Page callback for admin/config/content/percolate/users.
 */
function pi_user_mapping_form($form, &$form_state) {
  $form = array();
  $mapping = variable_get('pi_user_mapping', array());
  $form_state['num_users'] = isset($form_state['num_users']) ? $form_state['num_users'] + 1 : count($mapping) + 1;
  
  $form['pi_user_mapping'] = array(
    '#prefix' => '<div id="user-mappings">',
    '#type' => 'fieldset',
    '#title' => t('User mapping'),
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );
  
  for ($i = 0; $i < $form_state['num_users']; $i++) {
    $form['pi_user_mapping'][$i] = array(
      '#prefix' => '<div class="user-mapping clearfix">',
      '#suffix' => '</div>',
    );
    $form['pi_user_mapping'][$i]['p_uid'] = array(
      '#type' => 'textfield',
      '#default_value' => isset($mapping[$i]) ? $mapping[$i]['p_uid'] : '',
    );
    // Saved as UID, but displayed as username.
    $user = isset($mapping[$i]) ? user_load($mapping[$i]['uid']) : FALSE;
    $form['pi_user_mapping'][$i]['uid'] = array(
      '#type' => 'textfield',
      '#default_value' => $user ? $user->name : '',
      '#autocomplete_path' => 'user/autocomplete',
    );
  }
  
  $form['pi_user_mapping']['add_more'] = array(
    '#type' => 'submit',
    '#value' => 'Add more',
    '#submit' => array('pi_user_mapping_form_add_more'),
    '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'pi_user_mapping_form_add_more_ajax',
      'wrapper' => 'user-mappings',
    ),
  );
  
  // Add labels.
  $form['pi_user_mapping'][0]['p_uid']['#title'] = t('Percolate user ID');
  $form['pi_user_mapping'][0]['uid']['#title'] = t('Drupal user');
  
  $form['#attached']['css'][] = drupal_get_path('module', 'pi') . '/css/pi-admin.css';
  $form['#validate'][] = 'pi_settings_form_validate';
  
  return system_settings_form($form);
}

/**
 * Validate function for pi_settings_form.
 */
function pi_settings_form_validate($form, &$form_state) {
  // Filter out empties.
  $mappings = &$form_state['values']['pi_user_mapping'];
  foreach ($mappings as $index => $mapping) {
    if (!is_array($mapping) || empty($mapping['p_uid']) || empty($mapping['uid'])) {
      unset($mappings[$index]);
    }
  }

  $p_uids = array();
  $uids = array();
  
  foreach ($mappings as $index => $mapping) {
    $element_name = 'pi_user_mapping][' . $index;
    
    // Check for duplicates.
    if (in_array($mapping['p_uid'], $p_uids) || in_array($mapping['uid'], $uids)) {
      form_set_error($element_name, t('Duplicate mappings are not allowed.'));
    }
    $p_uids[] = $mapping['p_uid'];
    $uids[] = $mapping['uid'];
    
    // Confirm valid user name. Swap out user name for UID.
    $user = user_load_by_name($mapping['uid']);
    if ($user) {
      $mappings[$index]['uid'] = $user->uid;
    }
    else {
      form_set_error($element_name, t($mapping['uid'] . ' is not a valid username.'));
    }
    
    // Confirm percolate ID is real.
    $user = pi_get_percolate_user($uid);
    if (!$user) {
      form_set_error($element_name, t($mapping['p_uid'] . ' is not a valid Percolate user ID.'));
    }
  }
  
  // Reindex from 0.
  $mappings = array_values($mappings);
}

/**
 * Gets a percolate user. Returns FALSE if invalid user ID.
 */
function pi_get_percolate_user($uid) {
  $api = pi_build_api();
  try {
    $user = $api->getUser($mapping['p_uid']);
    return $user;
  }
  catch (Percolate_Exception $e) {
    return FALSE;
  }
}

/**
 * Gets a drupal uid from a percolate uid. Returns 0 if no mapping.
 */
function pi_get_user_from_percolate_user_id($p_uid) {
  $mappings = variable_get('pi_user_mapping', array());
  foreach ($mappings as $mapping) {
    if ($mapping['p_uid'] == $p_uid) {
      return $mapping['uid'];
    }
  }
  return 0;
}

/**
 * JS-less add more callback.
 */
function pi_user_mapping_form_add_more($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * AJAX add more callback.
 */
function pi_user_mapping_form_add_more_ajax($form, &$form_state) {
  watchdog('test', 'test');
  return $form['pi_user_mapping'];
}


/****************/
/* Mapping CRUD */
/****************/

/**
 * Maps an entity to a percolate post in the percolate_post_mapping table.
 *
 * @param $entity_type - Entity type of the linked entity.
 * @param $bundle - Bundle of the linked entity.
 * @param $entity_id - ID of the linked entity.
 * @param $p_id - Percolate post ID.
 * @param $p_uid - User ID of the Percolate post author.
 */
function pi_map_entity_to_post($entity_type, $bundle, $entity_id, $p_id, $p_uid) {
  db_merge('percolate_post_mapping')
    ->key(array(
      'entity_type' => $entity_type,
      'entity_id' => $entity_id,
      'percolate_id' => $p_id,
    ))
    ->fields(array(
      'bundle' => $bundle,
      'percolate_uid' => $p_uid,
    ))
    ->execute();
}


/**
 * Retrieves a mapping by entity.
 *
 * @param $entity_type - Entity type of the linked entity.
 * @param $entity_id - ID of the linked entity.
 *
 * @return stdClass
 */
function pi_get_mappings_by_entity($entity_type, $entity_id) {
  return db_select('percolate_post_mapping', 'ppm')
    ->fields('ppm')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entitiy_id)
    ->execute()
    ->fetch();
}


/**
 * Retrieves mappings to a post ID. Can be multiple.
 *
 * @param $p_id - Percolate post ID.
 * @param $entity_type - Entity type to filter by. OPTIONAL.
 * @param $bundle - Bundle to filter by. OPTIONAL.
 *
 * @return array
 */
function pi_get_mappings_by_post($p_id, $entity_type = FALSE, $bundle = FALSE) {
  $query = db_select('percolate_post_mapping', 'ppm')
    ->fields('ppm')
    ->condition('percolate_id', $p_id);
  
  if ($entity_type) {
    $query->condition('entity_type', $entity_type);
  }
  if ($bundle) {
    $query->condition('bundle', $bundle);
  }
  
  return $query->execute()->fetchAll();
}


/**
 * Marks mapping as deleted.
 * 
 * @param $entity_type
 * @param $entity_id
 */
function pi_mark_mapping_deleted($entity_type, $entity_id) {
  $query = db_update('percolate_post_mapping')
    ->fields(array(
      'deleted' => 1,
    ))
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute();
}

/**
 * Implements hook_entity_delete().
 */
function pi_entity_delete($entity, $type) {
  list($id) = entity_extract_ids($type, $entity);
  pi_mark_mapping_deleted($type, $id);
}
