<?php

define('PI_IMPORT_TYPE_USER', 1);
define('PI_IMPORT_TYPE_GROUP', 2);
define('PI_IMPORT_SETTINGS', 'pi_import_defaults');


/**
 * Implements hook_menu().
 */
function pi_import_menu() {
  $items['admin/content/percolate'] = array(
    'title' => 'Percolate Import',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pi_import_form'),
    'access arguments' => array('percolate import'),
  );
  
  return $items;
}


/**
 * Implements hook_permission().
 */
function pi_import_permission() {
  return array(
    'percolate import' => array(
      'title' => t('Import content from Percolate'),
      'description' => t('Gives user access to the import content from percolate form.'),
    ),
  );
}



/********************/
/* Settings & Forms */
/********************/


/**
 * Page callback for admin/content/percolate. Provides a form for importing
 * Percolate content.
 */
function pi_import_form($form, &$form_state) {
  $form = array();
  $default = pi_import_settings();
  
  $form['import_type'] = array(
    '#type' => 'select',
    '#title' => t('Import type'),
    '#options' => array(
      PI_IMPORT_TYPE_USER => t('User'),
      PI_IMPORT_TYPE_GROUP => t('Group'),
    ),
    '#default_value' => $default['import_type'],
  );
  
  $form['import_id'] = array(
    '#type' => 'textfield',
    '#title' => t('ID'),
    '#required' => TRUE,
    '#description' => t('ID of the type as specified above to import from.'),
    '#default_value' => $default['import_id'],
    '#size' => 13,
  );
  
  $form['import_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of articles to import'),
    '#description' => t('Choose how many of the latest posts to import. Duplicates will not be imported. Reducing this number reduces import time, but may cause you to miss posts since the last import.'),
    '#default_value' => $default['import_count'],
    '#size' => 3,
  );
  
  $types = node_type_get_types();
  $options = array();
  foreach ($types as $type) {
    $options[$type->type] = $type->name;
  }
  $form['content_type'] = array(
    '#type' => 'select',
    '#title' => t('Content type'),
    '#required' => TRUE,
    '#description' => t('The content type you want to map the percolate post to.'),
    '#options' => $options,
    '#default_value' => $default['content_type'],
    '#empty_option' => t('- Select -'),
    '#ajax' => array(
      'callback' => 'pi_import_form_content_type_ajax',
      'wrapper' => 'field-mappings',
    ),
  );
  

  $form['field_mappings'] = pi_import_build_field_mappings_table($default['content_type'], $default);
  
  $form['match_publish_date'] = array(
    '#type' => 'checkbox',
    '#title' => t('Match post publish date'),
    '#description' => t('Sets the node publish date to the percolate post publish date'),
    '#default_value' => $default['match_publish_date']
  );
  
  $form['reimport_deleted'] = array(
    '#type' => 'checkbox',
    '#title' => t('Re-import deleted'),
    '#description' => t('Import posts that were imported, and then deleted in Drupal again.'),
    '#default_value' => $default['reimport_deleted'],
  );
  
  $form['publish'] = array(
    '#type' => 'checkbox',
    '#title' => t('Publish imported nodes'),
    '#default_value' => $default['publish'],
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('pi_import_form_save_settings'),
  );
  $form['actions']['import'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#submit' => array(
      'pi_import_form_save_settings',
      'pi_import_form_import',
    ),
  );
  
  return $form;
}

/**
 * Submit callback for pi_import_form. Saves settings to variable.
 */
function pi_import_form_save_settings($form, &$form_state) {
  $settings = pi_import_settings();
  foreach ($settings as $name => $setting) {
    $settings[$name] = $form_state['values'][$name];
  }
  variable_set(PI_IMPORT_SETTINGS, $settings);
}

/**
 * Provide defaults for the import form.
 */
function pi_import_settings() {
  return array_merge(array(
    'import_type' => PI_IMPORT_TYPE_USER,
    'import_id' => '',
    'import_count' => 20,
    'content_type' => '',
    'field_mappings' => array(),
    'match_publish_date' => TRUE,
    'reimport_deleted' => TRUE,
    'publish' => FALSE,
  ), variable_get(PI_IMPORT_SETTINGS, array()));
}


/**
 * Build the table that allows a user to specify the maping of percolate content
 * to node fields.
 */
function pi_import_build_field_mappings_table($content_type, $default) {
  $types = node_type_get_types();
  $form = array(
    '#prefix' => '<div id="field-mappings">',
    '#type' => 'fieldset',
    '#title' => t('Post to node field mapping'),
    '#description' => t('Select how you want percolate post fields to map to node fields. Title and author will automatically be mapped to the post title, and Percolate UID (Which can be mapped to drupal users !here) respectively. Not all fields can be mapped to, only link fields, text-based fields, term fields, and file fields.', array(
      '!here' => l('here', 'admin/config/content/percolate/users'),
    )),
    '#tree' => TRUE,
    '#suffix' => '</div>',
  );
  
  if ($content_type) {
    $post_fields = pi_get_post_fields();
    $node_fields = pi_get_content_type_fields($content_type);
    
    foreach ($node_fields as $name => $field) {
      $value = isset($default['field_mappings'][$content_type][$name]) ? $default['field_mappings'][$content_type][$name] : 0;
      $form[$content_type][$name] = array(
        '#type' => 'select',
        '#title' => '<div class="label">' . $field['label'] . '</div>',
        '#options' => pi_get_field_post_field_options($field, $post_fields),
        '#required' => isset($field['required']) ? $field['required'] : FALSE,
        '#default_value' => $value,
        '#empty_option' => '- None -',
        '#empty_value' => 0,
      );
    }
  }
  else {
    $form['no_fields'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="description">',
      '#markup' => t('Select a content to specify field mappings.'),
      '#suffix' => '</div>',
    );
  }
  
  return $form;
}


/**
 * Returns an array that defines what fields from a percolate post that this
 * module is aware of, and what it knows how to map.
 */
function pi_get_post_fields() {
  $text = array('text', 'text_long', 'text_with_summary');
  $int = array('text', 'text_long', 'text_with_summary', 'number_integer');
  $file = array('file', 'image');
  $terms = array('taxonomy_term_reference');
  $link = array('text', 'text_long', 'text_with_summary', 'link_field');
  
  return array(
    'title' => array(
      'label' => 'Title',
      'types' => $text,
    ),
    'body' => array(
      'label' => 'Body',
      'types' => $text,
    ),
    'media' => array(
      'label' => 'Attached media',
      'types' => $file,
    ),
    'created_at' => array(
      'label' => 'Create date',
      'types' => $int,
    ),
    'tags' => array(
      'label' => 'Tags',
      'types' => $terms,
    ),
    'link_url' => array(
      'label' => 'Link - URL',
      'types' => $link,
    ),
    'link_title' => array(
      'label' => 'Link - Title',
      'types' => $text,
    ),
    'link_description' => array(
      'label' => 'Link - Description',
      'types' => $text,
    ),
    'short_url' => array(
      'label' => 'Shortened Percolate URL',
      'types' => $link,
    ),
    'id' => array(
      'label' => 'Percolate post ID',
      'types' => $int,
    ),
  );
}


/**
 * Return the list of fields that are applicable to a node field from a post.
 */
function pi_get_field_post_field_options($node_field, $post_fields) {
  $fields = array();
  foreach ($post_fields as $name => $post_field) {
    if (in_array($node_field['type'], $post_field['types'])) {
      $fields[$name] = $post_field['label'];
    }
  }
  
  return $fields;
}


/**
 * Return an array of fields that pi_import can handle. Complicated fields
 * are broken out in to multiple fields.
 */
function pi_get_content_type_fields($content_type) {
  $field_info = field_info_fields();
  $node_fields = field_info_instances('node', $content_type);
  $allowed_field_types = array(
    'text',
    'text_long',
    'text_with_summary',
    'image',
    'file',
    'link_field',
    'number_integer',
    'taxonomy_term_reference',
  );
  
  // Break out links in to multiple fields.
  $fields = array();
  foreach ($node_fields as $name => $field) {
    if (in_array($field_info[$name]['type'], $allowed_field_types)) {
      // Split link fields out in to multiple.
      if ($field_info[$name]['type'] == 'link_field') {
        $fields[$name . ':url'] = array(
          'type' => 'link_field',
          'label' => $field['label'] . ' - URL',
          'required' => $field['required'],
          'field_name' => $name,
        );
        if ($field['settings']['title'] != 'none') {
          $fields[$name . ':title'] = array(
            'type' => 'text',
            'label' => $field['label'] . ' - Title',
            'required' => ($field['required'] && $field['settings']['title'] == 'required') ?
              TRUE :
              FALSE,
            'field_name' => $name,
          );
        }
      }
      else {
        $fields[$name] = array(
          'type' => $field_info[$name]['type'],
          'label' => $field['label'],
          'required' => $field['required'],
          'field_name' => $name,
        );
      }
    }
  }
  
  
  return $fields;
}

/**
 * AJAX callback that replaces the mappings table with the content type's fields
 */
function pi_import_form_content_type_ajax($form, &$form_state) {
  $default = pi_import_settings();
  return pi_import_build_field_mappings_table($form_state['values']['content_type'], $default);
}




/**********/
/* Import */
/**********/

/**
 * Submit callback for pi_import_form. Runs an import batch process.
 */
function pi_import_form_import() {
  $settings = pi_import_settings();
  $api = pi_build_api();
  
  if ($settings['content_type'] && $api) {
    $posts = $api->getUserPosts($settings['import_id'], array(
      'limit' => $settings['import_count'],
    ));
    $ops = array();
    
    foreach ($posts['data'] as $post) {
      $ops[] = array('pi_import_import_post', array($post, $settings));
    }
    
    $batch = array(
      'operations' => $ops,
      'finished' => 'pi_import_batch_finished',
      'title' => t('Percolate Import'),
      'init_message' => t('Retrieving posts from Percolate.'),
      'progress_message' => t('Imported @current out of @total posts.'),
    );
    batch_set($batch);
  }
}

/**
 * Batch operation. Imports a percolate post using the mapping from the
 * import form. Returns saved node.
 */
function pi_import_import_post($post, $settings, &$context = array()) {
  // Initialize.
  if (empty($context['results'])) {
    $context['results'] = array(
      'imported' => 0,
      'drafts' => 0,
      'duplicates' => 0,
      'total' => 0,
    );
  }
  $context['results']['total']++;

  // Don't import draft posts.
  if (empty($post['published_to']) || !$post['published_to']['public']) {
    $context['results']['drafts']++;
    return FALSE;
  }
  
  // Don't import duplicates, unless deleted and configured that way.
  if ($post_mapping = pi_get_mappings_by_post($post['id'], 'node')) {
    $post_mapping = array_pop($post_mapping);
    if (!$settings['reimport_deleted'] || !$post_mapping->deleted) {
      $context['results']['duplicates']++;
      return FALSE;
    }
  }

  $mappings = $settings['field_mappings'][$settings['content_type']];
  $node_fields = pi_get_content_type_fields($settings['content_type']);
  
  // Alter post for assignment.
  $post['link_url'] = $post['link']['url'];
  $post['link_title'] = $post['link']['title'];
  $post['link_description'] = $post['link']['description'];
  
  // Initialize new node.
  $node = new stdClass();
  $node->title = $post['title'];
  $node->type = $settings['content_type'];
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->uid = pi_get_user_from_percolate_user_id($post['user_id']);
  $node->status = $settings['publish'] ? 1 : 0;
  
  
  foreach ($mappings as $node_field => $post_field) {
    if ($post_field) {
      $field_info = field_info_field($node_fields[$node_field]['field_name']);
      // Link fields are split out.
      if ($field_info['type'] == 'link_field') {
        $type = strstr($node_field, ':url') ? 'url' : 'title';
        $node->{$field_info['field_name']}[LANGUAGE_NONE][0][$type] = $post[$post_field];
      }
      else {
        switch ($post_field) {
          case 'tags':
            $tags = pi_import_tags($post, $field_info['settings']['allowed_values'][0]['vocabulary']);
            if ($tags) {
              $node->{$field_info['field_name']}[LANGUAGE_NONE] = $tags;
            }
            break;
            
          case 'media':
            $media = pi_import_media($post);
            if ($media) {
              $node->{$field_info['field_name']}[LANGUAGE_NONE][0] = (get_object_vars($media));
            }
            break;
            
          default:
            $node->{$field_info['field_name']}[LANGUAGE_NONE][0]['value'] = ($post[$post_field]);
            break;
            
        }
      }
    }
  }
  
  node_save($node);
  pi_map_entity_to_post('node', $node->type, $node->nid, $post['id'], $post['user_id']);
  $context['results']['imported']++;
}


/**
 * Imports a media file from percolate. Returns file object.
 */
function pi_import_media($post) {
  if (empty($post['media'])) {
    return FALSE;
  }
  
  $url = $post['media']['images']['original']['url'];
  $id = $post['media']['id'];
  $format = $post['media']['format'];
  
  $media_data = drupal_http_request($url);
  if (isset($media_data->error)) {
    $msg = t('Failed to retrieve media at !url during Percolate import of post !id.', array(
      '!url' => $url,
      '!id' => $post['id'],
    ));
    watchdog('Percolate Integration Import', $msg);
    drupal_set_message($msg, 'error');
    return FALSE;
  }
  
  $dir = 'public://percolate_import';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $file = file_save_data($media_data->data, $dir . '/' . $id . '.' . $format, FILE_EXISTS_REPLACE);
  return $file;
}


/**
 * Imports tags, returns fieldable values.
 */
function pi_import_tags($post, $vocab, $create = TRUE) {
  $tags = array();
  $vocab = taxonomy_vocabulary_machine_name_load($vocab);
  foreach ($post['tags'] as $tag) {
    // Attempt to load existing term.
    $term = taxonomy_get_term_by_name($tag['tag'], $vocab->machine_name);
    // Otherwise create a new one.
    if (!$term && $create) {
      $term = new stdClass();
      $term->vid = $vocab->vid;
      $term->name = $tag['tag'];
      $term = taxonomy_term_save($term);
    }
    
    if ($term = array_pop($term)) {
      $tags[]['tid'] = $term->tid;
    }
  }
  
  return $tags;
}


/**
 * 
 */
function pi_import_batch_finished($success, $results, $ops) {
  $message = t('Import completed! Of !total posts, !imported were imported, !drafts were still in the draft state, and !duplicates were duplicates.', array(
    '!total' => $results['total'],
    '!imported' => $results['imported'],
    '!drafts' => $results['drafts'],
    '!duplicates' => $results['duplicates'],
  ));
  drupal_set_message($message);
  watchdog('Percolate Integration Import', $message);
}
